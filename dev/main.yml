
# "cb" = shortened for codebase
# "qs" = shortened for quick starts
---


- hosts: "{{ variable_host | default('control') }}"
  vars:
    env: "development"
    branch_id: ""
    host_project_path: ""
    arch_ini: "arch section=Settings file={{ settings_dir }}/{{ settings_file }}"
    host_ini: "host section=Settings file={{ settings_dir }}/{{ settings_file }}"
    project_ini: "project section=Settings file={{ settings_dir }}/{{ settings_file }}"
    developer_ini: "developer section=Settings file={{ settings_dir }}/{{ settings_file }}"
    saved_project: "{{ lookup('ini', project_ini) }}"
    saved_developer: "{{ lookup('ini', developer_ini) }}"
    saved_arch: "{{ lookup('ini', arch_ini) }}"
    saved_host: "{{ lookup('ini', host_ini) }}"
    use_project: "{{ cb | default(saved_project, true) }}"
    use_arch: "{{ 'pi' if (arch_string | default('')) == 'pi' else '' }}"
    use_host: "{{ saved_host | default('www.dev.org') }}"
    use_developer: "{{ saved_developer | default(false) }}"
    operation: "{{ op | default('none') }}"
    template: "{{ tpl | default('vanilla') }}"
    composer_install_source: "{{ (use_developer) | ternary('--prefer-source', '') }}"
    compose_dir: "{{ '/home/vagrant/files' if (variable_host | default('')) == 'node' else playbook_dir }}"
    control_code_dir: "{{ hostvars['control']['code_dir'] }}"
  gather_facts: no
  tasks:
    - name: install pip packages
      include_tasks: "{{ playbook_dir }}/main_pip.yml"
    - name: boot
      block:
        - name: "show error"
          debug:
            msg: "No operation specified."
      when: operation == "none"
    - name: boot
      block:
        - name: nginx config
          include_tasks: "{{ playbook_dir }}/main_nginx.yml"
        - name: stop containers
          include_tasks: "{{ playbook_dir }}/main_stop.yml"
        - name: partials
          include_tasks: "{{ playbook_dir }}/partials.yml"
        - name: populate docker-compose
          template:
            src: "{{ playbook_dir }}/env/docker-compose.j2"
            dest: "{{ compose_dir }}/docker-compose.yml"
        - name: logging
          include_tasks: "{{ playbook_dir }}/main_logging.yml"
        - name: boot containers
          include_tasks: "{{ playbook_dir }}/main_boot.yml"
        # is below possible when
        # potentially an open docker port is
        # being detected?
        # (setting approximate delay)
        - name: wait for db
          ansible.builtin.wait_for:
            port: 3306
            delay: 20
            host: "{{ use_host }}"
        - name: detect build
          stat:
            path: "{{ code_dir }}/{{ use_project }}/vendor"
          register: st
        - name: install
          include_tasks: "{{ playbook_dir }}/main_install.yml"
          when: st.stat.exists == false
        - name: configure
          include_tasks: "{{ playbook_dir }}/main_configure.yml"
        - name: detect db setup file
          stat:
            path: "{{ code_dir }}/{{ use_project }}/setup.sql"
          register: stsetup
        - name: detect db dump file
          stat:
            path: "{{ code_dir }}/{{ use_project }}/dump.sql"
          register: stdump
        - name: populate db (dump)
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --mysql populate"
          when: stsetup.stat.exists and stdump.stat.exists
        - name: populate db (setup)
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --mysql setup"
          when: stsetup.stat.exists and not stdump.stat.exists 
        - name: check if build file contains remix
          shell: docker exec -i -u www-data app ant -p | grep remix | wc -l | awk '{ print $1 }'
          register: hasRemix 
        - name: build react
          shell: docker exec -i -u www-data app ant remix  
          when: hasRemix.stdout | int == 1
        - name: restart remix
          community.docker.docker_compose_v2:
            project_src: "{{ compose_dir }}"
            services:
              - remix
            recreate: always
          when: hasRemix.stdout | int == 1  
      when: operation == "boot"
    - name: switch
      block:
        - name: save settings
          include_tasks: "{{ playbook_dir }}/main_save_settings.yml"
      when: operation == "switch"
    - name: qs
      block:
        - name: detect dir name
          stat:
            path: "{{ code_dir }}/{{ use_project }}"
          register: st
        - name: exit if dir exists
          ansible.builtin.fail:
            msg: Directory exists.
          when: st.stat.exists == true
        - name: create directory
          file:
            path: "{{ code_dir }}/{{ use_project }}"
            state: directory
        - name: populate composer config
          template:
            src: "{{ playbook_dir }}/env/templates/vanilla/composer.j2"
            dest: "{{ code_dir }}/{{ use_project }}/composer.json"
        - name: stop containers
          include_tasks: "{{ playbook_dir }}/main_stop.yml" 
        - name: partials
          include_tasks: "{{ playbook_dir }}/partials.yml" 
        - name: populate docker-compose
          template:
            src: "{{ playbook_dir }}/env/docker-compose.j2"
            dest: "{{ compose_dir }}/docker-compose.yml"
        - name: logging
          include_tasks: "{{ playbook_dir }}/main_logging.yml"
        - name: create server directory
          file:
            path: "{{ code_dir }}/{{ use_project }}/react/server"
            state: directory
          when: template == 'elib-cms'
        - name: boot containers
          include_tasks: "{{ playbook_dir }}/main_boot.yml"
        - name: install
          include_tasks: "{{ playbook_dir }}/main_install.yml"
        - name: configure
          include_tasks: "{{ playbook_dir }}/main_configure.yml"
        - name: save settings
          include_tasks: "{{ playbook_dir }}/main_save_settings.yml"
      when: operation == "qs"
    - name: qs elib-base template
      block:
        - name: nginx config
          include_tasks: "{{ playbook_dir }}/main_nginx.yml"
        - name: populate elib.yml
          template:
            src: "{{ playbook_dir }}/env/templates/elib-base/elib.j2"
            dest: "{{ code_dir }}/{{ use_project }}/elib.yml"
        - name: enable elib
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --set_elib"
        - name: get installed elibs
          command: docker exec -i -u www-data app php ./vendor/bin/empathy --get_elibs
          register: installed_elibs
        - name: set installed libs list
          ansible.builtin.set_fact:
            installed_elibs_list: "{{ installed_elibs.stdout | from_json }}"
        - name: 'set file name'
          ansible.builtin.set_fact:
            input_file: 'dd.sql'
        - name: initialise data array
          ansible.builtin.set_fact:
            data_found: [ ]
        - name: read dd
          include_tasks: "{{ playbook_dir }}/main_read_files.yml"
          loop: "{{ installed_elibs_list }}"
        - name: get dd tables
          command: docker exec -i -u www-data app php ./vendor/bin/empathy --get_elib_tables
          register: tables
        - name: set table list
          ansible.builtin.set_fact:
            table_list: "{{ tables.stdout | from_json }}"
        - name: populate setup.sql
          template:
            src: "{{ playbook_dir }}/env/templates/elib-base/setup.j2"
            dest: "{{ code_dir }}/{{ use_project }}/setup.sql"
        - name: 'set file name'
          ansible.builtin.set_fact:
            input_file: 'dm.sql'
        - name: initialise data array
          ansible.builtin.set_fact:
            data_found: [ ]
        - name: read dm
          include_tasks: "{{ playbook_dir }}/main_read_files.yml"
          loop: "{{ installed_elibs_list }}"
        - name: populate inserts.sql
          template:
            src: "{{ playbook_dir }}/env/templates/elib-base/inserts.j2"
            dest: "{{ code_dir }}/{{ use_project }}/inserts.sql"
        - name: 'set file name'
          ansible.builtin.set_fact:
            input_file: 'inserts.sql'
        - name: lint inserts
          include_tasks: "{{ playbook_dir }}/main_lint_sql.yml"
        - name: 'set file name'
          ansible.builtin.set_fact:
            input_file: 'setup.sql'
        - name: lint setup
          include_tasks: "{{ playbook_dir }}/main_lint_sql.yml"
        - name: populate db setup
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --mysql setup"
        - name: admin module
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --inst_mod admin"
        - name: admin module
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --inst_mod user"
        - name: clear cache
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --clear_cache"
      when: operation == "qs" and template != "vanilla"
    - name: qs elib-acl template
      block:
        # overwrite dm.sql
        - name: read dm.sql
          slurp:
            src: "{{ code_dir }}/{{ use_project }}/vendor/mikejw/elib-acl/dm.sql"
          register: data
        - name: initialise data array
          ansible.builtin.set_fact:
            data_found: "{{ [ data['content'] | b64decode ] }}"
        - name: populate inserts.sql
          template:
            src: "{{ playbook_dir }}/env/templates/elib-base/inserts.j2"
            dest: "{{ code_dir }}/{{ use_project }}/inserts.sql"
        - name: 'set file name'
          ansible.builtin.set_fact:
            input_file: 'inserts.sql'
        - name: lint
          include_tasks: "{{ playbook_dir }}/main_lint_sql.yml"
        # setup plugins
        - name: set acl plugin config
          ansible.builtin.set_fact:
            json:
              name: Empathy\ELib\MVC\Plugin\Acl
              version: "1.0"
        - name: assert acl plugin
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --assert_plugin '{{ json | to_json }}'"
        - name: set json view plugin config
          ansible.builtin.set_fact:
            json:
              name: JSONView
              version: "1.0"
              config: '[{ "api": {} }, { "api2": {} }, { "api3": {} }]'
        - name: assert json view plugin
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --assert_plugin '{{ json | to_json }}'"
        # modify elib
        - name: open elib config
          slurp:
            path: "{{ code_dir }}/{{ use_project }}/elib.yml"
          register: r_elibconfig
        - name: read yaml
          set_fact:
            elibconfigdata: "{{ r_elibconfig['content'] | b64decode | from_yaml }}"
        - name: patch yaml
          set_fact:
            elibconfigdata: "{{ elibconfigdata | combine(newdata, recursive=True) }}"
          vars: 
            newdata:
              jwt_secret: my_super_secret_key
        - name: write yaml
          copy:
            content: '{{ elibconfigdata | to_nice_yaml }}'
            dest: "{{ code_dir }}/{{ use_project }}/elib.yml"
        # templates    
        - name: populate services.php
          template:
            src: "{{ playbook_dir }}/env/templates/elib-acl/services.j2"
            dest: "{{ code_dir }}/{{ use_project }}/services.php"
        - name: populate admin.php
          template:
            src: "{{ playbook_dir }}/env/templates/elib-acl/application/admin.j2"
            dest: "{{ code_dir }}/{{ use_project }}/application/admin/admin.php"
        - name: generate api module
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --inst_mod api"
        - name: clear cache 
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --clear_cache"
        - name: populate db
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --mysql setup"
        - name: create module dir api2
          file:
            path: "{{ code_dir }}/{{ use_project }}/application/api2"
            state: directory
        - name: create module dir api3
          file:
            path: "{{ code_dir }}/{{ use_project }}/application/api3"
            state: directory
        - name: populate api2.php
          template:
            src: "{{ playbook_dir }}/env/templates/elib-acl/application/api2.j2"
            dest: "{{ code_dir }}/{{ use_project }}/application/api2/api2.php"
        - name: populate api3.php
          template:
            src: "{{ playbook_dir }}/env/templates/elib-acl/application/api3.j2"
            dest: "{{ code_dir }}/{{ use_project }}/application/api3/api3.php"
      when: operation == "qs" and template == "elib-acl"
    - name: qs elib-cms template
      block:
        - name: copy reset css
          copy:
            src: "{{ playbook_dir }}/env/templates/elib-cms/public_html/reset.j2"
            dest: "{{ code_dir }}/{{ use_project }}/public_html/css/reset.css"
        - name: copy tpl files
          copy:
            src: "{{ playbook_dir }}/env/templates/elib-cms/tpl/"
            dest: "{{ code_dir }}/{{ use_project }}/presentation"
        - name: set redbean plugin
          ansible.builtin.set_fact:
            json:
              name: Redbean
              version: "1.0"
        - name: assert redbean plugin
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --assert_plugin '{{ json | to_json }}'"
        - name: set site info plugin
          ansible.builtin.set_fact:
            json:
              name: Empathy\ELib\MVC\Plugin\SiteInfo
              version: "1.0"
        - name: assert site info plugin
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --assert_plugin '{{ json | to_json }}'"
        - name: set json view plugin config
          ansible.builtin.set_fact:
            json:
              name: JSONView
              version: "1.0"
              config: '[{ "resume": {} }]'
        - name: assert json view plugin
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --assert_plugin '{{ json | to_json }}'"   
        - name: create module dir resume
          file:
            path: "{{ code_dir }}/{{ use_project }}/application/resume"
            state: directory
        - name: populate templateA.php
          template:
            src: "{{ playbook_dir }}/env/templates/elib-cms/application/templateA.j2"
            dest: "{{ code_dir }}/{{ use_project }}/application/resume/templateA.php"
        - name: populate templateB.php
          template:
            src: "{{ playbook_dir }}/env/templates/elib-cms/application/templateB.j2"
            dest: "{{ code_dir }}/{{ use_project }}/application/resume/templateB.php"
        - name: populate city2.png
          copy:
            src: "{{ playbook_dir }}/env/templates/elib-cms/public_html/city2.png"
            dest: "{{ code_dir }}/{{ use_project }}/public_html/img/"
        - name: populate resume.css
          copy:
            src: "{{ playbook_dir }}/env/templates/elib-cms/public_html/resume.css"
            dest: "{{ code_dir }}/{{ use_project }}/public_html/css/"          
        - name: copy upload profile image
          ansible.builtin.copy:
            src: "{{ item }}"
            dest: "{{ code_dir }}/{{ use_project }}/public_html/uploads/"
            mode: 0600
          with_fileglob:
            - "{{ playbook_dir }}/env/templates/elib-cms/public_html/uploads/*"
        - name: site info module
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --inst_mod admin"
        - name: populate services.php
          template:
            src: "{{ playbook_dir }}/env/templates/elib-cms/services.j2"
            dest: "{{ code_dir }}/{{ use_project }}/services.php"
        - name: set default module
          ansible.builtin.lineinfile:
            path: "{{ code_dir }}/{{ use_project }}/config.yml"
            regexp: 'default_module:'
            line: "  default_module: resume"
        - name: set dynamic module
          ansible.builtin.lineinfile:
            path: "{{ code_dir }}/{{ use_project }}/config.yml"
            regexp: 'dynamic_module:'
            line: "  dynamic_module: resume"
        - name: set dynamic module default uri
          ansible.builtin.lineinfile:
            path: "{{ code_dir }}/{{ use_project }}/config.yml"
            regexp: 'dynamic_module_default_uri:'
            line: "  dynamic_module_default_uri: splash"
        - name: clear cache
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --clear_cache"
        - name: copy dump file
          copy:
            src: "{{ playbook_dir }}/env/templates/elib-cms/dump.sql"
            dest: "{{ code_dir }}/{{ use_project }}"
        - name: populate db
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --mysql populate"
        - name: restart remix
          community.docker.docker_compose_v2:
            project_src: "{{ compose_dir }}"
            services:
              - remix
            recreate: always
      when: operation == "qs" and template == "elib-cms"
    - name: qs elib-blog template
      block:
        - name: generate front blog module
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --inst_mod blog"
        - name: generate front blog feed module
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --inst_mod feed"
        - name: populate db
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --mysql setup"
        # modify elib
        - name: open elib config
          slurp:
            path: "{{ code_dir }}/{{ use_project }}/elib.yml"
          register: r_elibconfig
        - name: read yaml
          set_fact:
            elibconfigdata: "{{ r_elibconfig['content'] | b64decode | from_yaml }}"
        - name: patch yaml
          set_fact:
            elibconfigdata: "{{ elibconfigdata | combine(newdata, recursive=True) }}"
          vars:
            newdata:
              blog_title: An Empathy Blog
              blog_description: Some words from me
              truncate_blog_items: true
              fetch_blog_images: false
              def_blog_category: 0
              def_blog_per_page: 3
              blog_social_links: '{ "X": "https://twitter.com/mikejw" }'
        - name: write yaml
          copy:
            content: '{{ elibconfigdata | to_nice_yaml }}'
            dest: "{{ code_dir }}/{{ use_project }}/elib.yml"
        - name: copy application files
          copy:
            src: "{{ playbook_dir }}/env/templates/elib-blog/application/"
            dest: "{{ code_dir }}/{{ use_project }}/application"
        - name: copy tpl files
          copy:
            src: "{{ playbook_dir }}/env/templates/elib-blog/tpl/"
            dest: "{{ code_dir }}/{{ use_project }}/presentation"
        - name: copy htaccess files
          copy:
            src: "{{ playbook_dir }}/env/templates/elib-blog/public_html/htaccess"
            dest: "{{ code_dir }}/{{ use_project }}/public_html/.htaccess"
        - name: copy public files
          copy:
            src: "{{ playbook_dir }}/env/templates/elib-blog/public_html/"
            dest: "{{ code_dir }}/{{ use_project }}/public_html"
        - name: set redbean plugin
          ansible.builtin.set_fact:
            json:
              name: Redbean
              version: "1.0"
        - name: assert redbean plugin
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --assert_plugin '{{ json | to_json }}'"
        - name: set site info plugin
          ansible.builtin.set_fact:
            json:
              name: Empathy\ELib\MVC\Plugin\SiteInfo
              version: "1.0"
        - name: assert site info plugin
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --assert_plugin '{{ json | to_json }}'"
        - name: disable error handling
          ansible.builtin.lineinfile:
            path: "{{ code_dir }}/{{ use_project }}/config.yml"
            regexp: 'handle_errors'
            line: "  handle_errors: false"
        - name: enable apcu debug
          ansible.builtin.lineinfile:
            path: "{{ code_dir }}/{{ use_project }}/services.php"
            regexp: 'ApcuDebug'
            line: "    'ApcuDebug' => true,"
        - name: set default module
          ansible.builtin.lineinfile:
            path: "{{ code_dir }}/{{ use_project }}/config.yml"
            regexp: 'default_module'
            line: "  default_module: blog"
        - name: populate services.php
          template:
            src: "{{ playbook_dir }}/env/templates/elib-blog/services.j2"
            dest: "{{ code_dir }}/{{ use_project }}/services.php"
        - name: create uploads dir
          file:
              path: "{{ code_dir }}/{{ use_project }}/public_html/uploads"
              state: directory
        - name: clear cache
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --clear_cache"
        - name: copy dump file
          copy:
            src: "{{ playbook_dir }}/env/templates/elib-blog/dump.sql"
            dest: "{{ code_dir }}/{{ use_project }}"
        - name: populate db
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --mysql populate"
      when: operation == "qs" and template == "elib-blog"


