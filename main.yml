
# "cb" = shortened for codebase
# "qs" = shortened for quick starts
---
- hosts: "{{ variable_host | default('control') }}"
  vars:
    project_ini_string: "project section=Settings file={{ settings_dir }}/{{ settings_file }}"
    saved_project: "{{ lookup('ini', project_ini_string) }}"
    operation: "{{ (op is defined) | ternary(op, 'none') }}"
    project: "{{ (cb is defined) | ternary(cb, saved_project) }}"
    template: "{{ (tpl is defined) | ternary(tpl, 'vanilla') }}"
  gather_facts: no
  tasks:
    - name: default
      block:
        - name: "show error"
          debug:
            msg: "No operation specified."
      when: operation == "none"
    - name: boot
      block:
        - name: install python docker
          pip:
            virtualenv: "{{ virtualenv_dir }}"
            name:
              - docker-compose
        - name: populate docker-compose
          template:
            src: "{{ playbook_dir }}/env/docker-compose.j2"
            dest: "{{ playbook_dir }}/docker-compose.yml"
        - name: stop any existing containers
          docker_compose:
            project_src: "{{ playbook_dir }}"
            state: absent
        - name: boot containers
          docker_compose:
            project_src: "{{ playbook_dir }}"
            state: present
        # is below possible when
        # potentially an open docker port is
        # being detected?
        # (setting approximate delay)
        - name: wait for db
          ansible.builtin.wait_for:
            port: 3306
            delay: 20
        - name: detect build
          stat:
            path: "{{ code_dir }}/{{ project }}/vendor"
          register: st
        - name: build
          shell: |
            docker exec -u www-data app ant
            docker exec -u www-data app php ./vendor/bin/empathy --set_docroot /var/www/project
            docker exec -u www-data app php ./vendor/bin/empathy --set_webroot www.dev.org
            docker exec -u www-data app php ./vendor/bin/empathy --set_publicdir ""
            docker exec -u www-data app php ./vendor/bin/empathy --misc tpl_cache
            docker exec -u www-data app php ./vendor/bin/empathy --set_dbserver db
            docker exec -u www-data app php ./vendor/bin/empathy --set_dbuser root
            docker exec -u www-data app php ./vendor/bin/empathy --set_dbpass example
            docker exec -u www-data app php ./vendor/bin/empathy --set_dbname project
          when: st.stat.exists == false
        - name: detect db setup file
          stat:
            path: "{{ code_dir }}/{{ project }}/setup.sql"
          register: stsetup
        - name: detect db dump file
          stat:
            path: "{{ code_dir }}/{{ project }}/dump.sql"
          register: stdump
        - name: populate db (dump)
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --mysql populate"
          when: stsetup.stat.exists and stdump.stat.exists
        - name: populate db (setup)
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --mysql setup"
          when: stsetup.stat.exists and not stdump.stat.exists
        - name: detect react dir
          stat:
            path: "{{ code_dir }}/{{ project }}/react"
          register: st
        - name: kill any pre-existing webpack dev server
          shell: "(killall node 2>/dev/null)"
          ignore_errors: yes
          when: st.stat.exists == true
        - name: run webpack
          shell: "(cd {{ code_dir }}/{{ project }}/react; npm run dev >> {{ playbook_dir }}/react.log 2>&1 &)"
          when: st.stat.exists == true
      when: operation == "boot"
    - name: switch
      block:
        - name: populate settings file
          template:
            src: "{{ playbook_dir }}/env/base-docker.j2"
            dest: "{{ settings_dir }}/{{ settings_file }}"
      when: operation == "switch"
    - name: qs
      block:
        - name: detect dir name
          stat:
            path: "{{ code_dir }}/{{ project }}"
          register: st
        - name: exit if dir exists
          ansible.builtin.fail:
            msg: Directory exists.
          when: st.stat.exists == true
        - name: create directory
          file:
            path: "{{ code_dir }}/{{ project }}"
            state: directory
        - name: populate composer config
          template:
            src: "{{ playbook_dir }}/env/templates/vanilla/composer.j2"
            dest: "{{ code_dir }}/{{ project }}/composer.json"
        - name: download composer
          ansible.builtin.get_url:
            url: https://getcomposer.org/composer.phar
            dest: "{{ code_dir }}/{{ project }}"
        - name: install python docker
          pip:
            virtualenv: "{{ virtualenv_dir }}"
            name:
              - docker-compose
              - pexpect
              - sqlfluff
        - name: populate docker-compose
          template:
            src: "{{ playbook_dir }}/env/docker-compose.j2"
            dest: "{{ playbook_dir }}/docker-compose.yml"
        - name: stop any existing containers
          docker_compose:
            project_src: "{{ playbook_dir }}"
            state: absent
        - name: boot containers
          docker_compose:
            project_src: "{{ playbook_dir }}"
            state: present
        - name: composer install
          shell: docker exec -i -u www-data app php ./composer.phar install
        - name: set up app
          expect:
            command: docker exec -i -u www-data app php ./vendor/bin/empathy --new_app
            responses:
              'Please enter document root': "/var/www/project"
              'Please enter name': "{{ project }}"
              'Please enter web root': "www.dev.org"
        - name: npm install
          shell: docker exec -i -u www-data app npm install --no-bin-links
        - name: grunt
          shell: docker exec -i -u www-data app make grunt
        - name: saving active project
          template:
            src: "{{ playbook_dir }}/env/base-docker.j2"
            dest: "{{ settings_dir }}/{{ settings_file }}"
      when: operation == "qs"
    - name: qs elib-base template
      block:
        - name: populate elib.yml
          template:
            src: "{{ playbook_dir }}/env/templates/elib-base/elib.j2"
            dest: "{{ code_dir }}/{{ project }}/elib.yml"
        - name: enable elib
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --set_elib"
        - name: get installed elibs
          command: docker exec -i -u www-data app php ./vendor/bin/empathy --get_elibs
          register: installed_elibs
        - name: set installed libs list
          ansible.builtin.set_fact:
            installed_elibs_list: "{{ installed_elibs.stdout | from_json | reverse }}"
        - name: 'set file name'
          ansible.builtin.set_fact:
            input_file: 'dd.sql'
        - name: initialise data array
          ansible.builtin.set_fact:
            data_found: [ ]
        - name: read dd
          include_tasks: "{{ playbook_dir }}/read_files.yml"
          loop: "{{ installed_elibs_list }}"
        - name: get dd tables
          command: docker exec -i -u www-data app php ./vendor/bin/empathy --get_elib_tables
          register: tables
        - name: set table list
          ansible.builtin.set_fact:
            table_list: "{{ tables.stdout | from_json }}"
        - name: populate setup.sql
          template:
            src: "{{ playbook_dir }}/env/templates/elib-base/setup.j2"
            dest: "{{ code_dir }}/{{ project }}/setup.sql"
        - name: 'set file name'
          ansible.builtin.set_fact:
            input_file: 'dm.sql'
        - name: initialise data array
          ansible.builtin.set_fact:
            data_found: [ ]
        - name: read dm
          include_tasks: "{{ playbook_dir }}/read_files.yml"
          loop: "{{ installed_elibs_list }}"
        - name: populate inserts.sql
          template:
            src: "{{ playbook_dir }}/env/templates/elib-base/inserts.j2"
            dest: "{{ code_dir }}/{{ project }}/inserts.sql"
        - name: 'set file name'
          ansible.builtin.set_fact:
            input_file: 'inserts.sql'
        - name: lint
          include_tasks: "{{ playbook_dir }}/lint_sql.yml"
        - name: 'set file name'
          ansible.builtin.set_fact:
            input_file: 'inserts.sql'
        - name: lint
          include_tasks: "{{ playbook_dir }}/lint_sql.yml"
        - name: populate db setup
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --mysql setup"
        - name: admin module
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --inst_mod admin"
        - name: admin module
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --inst_mod user"
        - name: clear cache
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --clear_cache"
      when: operation == "qs" and template != "vanilla"
    - name: qs elib-acl template
      block:
        # overwrite dm.sql
        - name: read dm.sql
          slurp:
            src: "{{ code_dir }}/{{ project }}/vendor/mikejw/elib-acl/dm.sql"
          register: data
        - name: initialise data array
          ansible.builtin.set_fact:
            data_found: "{{ [ data['content'] | b64decode ] }}"
        - name: populate inserts.sql
          template:
            src: "{{ playbook_dir }}/env/templates/elib-base/inserts.j2"
            dest: "{{ code_dir }}/{{ project }}/inserts.sql"
        - name: 'set file name'
          ansible.builtin.set_fact:
            input_file: 'inserts.sql'
        - name: lint
          include_tasks: "{{ playbook_dir }}/lint_sql.yml"
        # setup plugins
        - name: set json view plugin config config
          ansible.builtin.set_fact:
            json:
              api: { 'pretty_print': true }
        - name: set json view plugin config
          ansible.builtin.set_fact:
            json:
              name: JSONView
              version: 1.0
              config: "{{ json | to_json }}"
        - name: assert json view plugin
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --assert_plugin '{{ json | to_json }}'"
        - name: set acl plugin config
          ansible.builtin.set_fact:
            json:
              name: Empathy\ELib\MVC\Plugin\Acl
              version: 1.0
        - name: assert acl plugin
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --assert_plugin '{{ json | to_json }}'"
        # modify elib
        - name: open elib config
          slurp:
            path: "{{ code_dir }}/{{ project }}/elib.yml"
          register: r_elibconfig
        - name: read yaml
          set_fact:
            elibconfigdata: "{{ r_elibconfig['content'] | b64decode | from_yaml }}"
        - name: patch yaml
          set_fact:
            elibconfigdata: "{{ elibconfigdata | combine(newdata, recursive=True) }}"
          vars: 
            newdata:
              jwt_secret: my_super_secret_key
        - name: write yaml
          copy:
            content: '{{ elibconfigdata | to_nice_yaml }}'
            dest: "{{ code_dir }}/{{ project }}/elib.yml"
        # templates    
        - name: populate services.php
          template:
            src: "{{ playbook_dir }}/env/templates/elib-acl/services.j2"
            dest: "{{ code_dir }}/{{ project }}/services.php" 
        - name: populate admin.php
          template:
            src: "{{ playbook_dir }}/env/templates/elib-acl/admin.j2"
            dest: "{{ code_dir }}/{{ project }}/application/admin/admin.php"
        - name: generate api module
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --inst_mod api"
        - name: clear cache 
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --clear_cache"
        - name: populate db
          command: "docker exec -i -u www-data app php ./vendor/bin/empathy --mysql setup"  
      when: operation == "qs" and template == "elib-acl"



